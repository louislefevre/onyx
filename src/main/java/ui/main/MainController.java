package ui.main;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.text.TextFlow;
import javafx.stage.Stage;
import org.fxmisc.richtext.CodeArea;
import ui.StageManager;

import java.io.IOException;

/**
 * The MainController class is used communicate with and control the main GUI.
 * <p>
 * Communication is done through FXML, through the use of labels in the FXML file and annotations in this Java class.
 *
 * @author Louis Lefevre
 * @version 1.0
 * @since 1.0
 */
public final class MainController
{
    @FXML private CodeArea codeAreaInput;
    @FXML private TextFlow textFlowOutput;
    @FXML private Label lineInfoLabel;
    @FXML private TextField tabSizeField;

    private AlertManager alertManager;
    private FileManager fileManager;
    private CodeAreaManager codeAreaManager;

    /**
     * Runs when the main GUI is started up.
     * <p>
     * Is used to initialise the AlertManager, FileManager, and CodeAreaManager so that they are ready for use.
     */
    @FXML
    void initialize()
    {
        alertManager = new AlertManager();
        fileManager = new FileManager();
        codeAreaManager = new CodeAreaManager(codeAreaInput, tabSizeField, 4);
    }

    /**
     * Evaluates the users input and displays the output.
     * <p>
     * The input given by the user is retrieved by the CodeAreaManager, and then compiled by the Compiler. The TextFlow
     * is cleared, then result is then added to it.
     */
    @FXML
    void runSource()
    {
        TextFlow output = codeAreaManager.compileInput();
        textFlowOutput.getChildren().clear();
        textFlowOutput.getChildren().addAll(output);
    }

    /**
     * Opens the REPL window.
     *
     * @throws IOException If the path is not found
     */
    @FXML
    void openRepl() throws IOException
    {
        StageManager stageManager = new StageManager();
        stageManager.startRepl(new Stage());
    }

    /**
     * Updates the current position of the caret.
     * <p>
     * This method executes every time the user moves the caret along the text in some way. The new position is
     * retrieved by the CodeAreaManager, and then the Label displaying the line number is updated.
     */
    @FXML
    void updateLineInfo()
    {
        String info = codeAreaManager.getCaretPosition();
        lineInfoLabel.setText(info);
    }

    /**
     * Updates the amount of spaces generated by the tab key when pressed.
     * <p>
     * This method runs whenever the user updates the tab size field.
     */
    @FXML
    void updateTabSize()
    {
        codeAreaManager.updateTabSize();
    }

    /**
     * Limits the amount of characters that can be placed within the tab size label.
     * <p>
     * To prevent the user overflowing the tab size field, its character limit is set to 2. This method is called
     * whenever the user tries to update the field, and checks to ensure the input is valid.
     */
    @FXML
    void limitInputSize()
    {
        codeAreaManager.limitTabSize(2);
    }

    /**
     * Creates a new file.
     * <p>
     * If the user currently has unsaved work, a confirmation alert will appear asking them if they wish
     * to continue.
     */
    @FXML
    void newFile()
    {
        String text = codeAreaInput.getText();

        if (containsUnsavedWork(text))
            return;

        String fileText = fileManager.openNewFile();
        codeAreaInput.replaceText(fileText);
    }

    /**
     * Opens a window for opening a file.
     * <p>
     * If the user currently has unsaved work, a confirmation alert will appear asking them if they wish
     * to continue.
     * <p>
     * If the user attempts to open a file they don't have permission to access, uses an invalid file extensions, or
     * no longer exists since being selected, an error alert is shown.
     */
    @FXML
    void openFileChooser()
    {
        try
        {
            String text = codeAreaInput.getText();

            if (containsUnsavedWork(text))
                return;

            String fileText = fileManager.openFile();
            codeAreaInput.replaceText(fileText);
        }
        catch (IOException | IllegalArgumentException exception)
        {
            openErrorAlert(exception.getMessage());
        }
        catch (NullPointerException exception)
        {
            System.out.println(exception.getMessage());
        }
    }

    /**
     * Saves a file currently in progress.
     * <p>
     * If the file has since been moved, renamed, deleted, or externally updated in any way since being opened,
     * the 'save as' window will open instead.
     */
    @FXML
    void saveFile()
    {
        try
        {
            String text = codeAreaInput.getText();
            fileManager.saveFile(text);
        }
        catch (IOException | IllegalArgumentException exception)
        {
            openErrorAlert(exception.getMessage());
        }
        catch (NullPointerException exception)
        {
            System.out.println(exception.getMessage());
        }
    }

    /**
     * Opens a window for saving a file.
     * <p>
     * If the user attempts to save to a file they don't have permission to access, or no longer exists since being
     * selected, an error alert is shown.
     */
    @FXML
    void saveFileAs()
    {
        String text = codeAreaInput.getText();
        try
        {
            fileManager.saveFileAs(text);
        }
        catch (IOException | IllegalArgumentException exception)
        {
            openErrorAlert(exception.getMessage());
        }
        catch (NullPointerException exception)
        {
            System.out.println(exception.getMessage());
        }
    }

    /**
     * Ends the JavaFX application and exits the program.
     * <p>
     * If the user has unsaved work, this method will show a confirmation alert asking them if they wish to continue.
     */
    @FXML
    void exitProgram()
    {
        String text = codeAreaInput.getText();
        if (containsUnsavedWork(text))
            return;

        Platform.exit();
    }

    /**
     * Opens the GitHub wiki page in the browser.
     * <p>
     * This method opens the users default browser, and is designed to work with all major operating systems.
     *
     * @throws IOException If the path is not valid
     */
    @FXML
    void openWikiPage() throws IOException
    {
        String url = "https://github.com/louislefevre/onyx-compiler/wiki";
        openHyperlink(url);
    }

    /**
     * Opens the GitHub repository page in the browser.
     * <p>
     * This method opens the users default browser, and is designed to work with all major operating systems.
     *
     * @throws IOException If the path is not valid
     */
    @FXML
    void openHomePage() throws IOException
    {
        String url = "https://github.com/louislefevre/onyx-compiler";
        openHyperlink(url);
    }

    private void openErrorAlert(String message)
    {
        alertManager.startErrorAlert(message);
    }

    private boolean openConfirmationAlert(String message)
    {
        return alertManager.startConfirmationAlert(message);
    }

    private boolean containsUnsavedWork(String text)
    {
        boolean saved = fileManager.checkIfSaved(text);

        if (saved)
            return false;

        String message = "You have unsaved changes that will be lost if you open another file.\n" +
                         "Are you sure you want to continue?";
        boolean confirmation = openConfirmationAlert(message);

        return !confirmation;
    }

    private void openHyperlink(String url) throws IOException
    {
        String systemName = System.getProperty("os.name").toLowerCase();
        Runtime runtime = Runtime.getRuntime();

        if (systemName.contains("win"))
            runtime.exec("rundll32 url.dll,FileProtocolHandler " + url);
        else if (systemName.contains("mac"))
            runtime.exec("open " + url);
        else if (systemName.contains("nix") || systemName.contains("nux"))
            runtime.exec("xdg-open " + url);
        else
            openErrorAlert("Failed to open browser: unrecognised operating system.");
    }
}
